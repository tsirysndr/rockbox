syntax = "proto3";

package rockbox.v1alpha1;

import "rockbox/v1alpha1/playback.proto";

message GetCurrentRequest {}

message GetCurrentResponse {
  int32 index = 1;
  int32 amount = 2;
  int32 max_playlist_size = 3;
  int32 first_index = 4;
  int32 last_insert_pos = 5;
  int32 seed = 6;
  int32 last_shuffled_start = 7;
  repeated rockbox.v1alpha1.CurrentTrackResponse tracks = 8;
}

message GetResumeInfoRequest {}

message GetResumeInfoResponse {}

message GetTrackInfoRequest {}

message GetTrackInfoResponse {}

message GetFirstIndexRequest {}

message GetFirstIndexResponse {}

message GetDisplayIndexRequest {}

message GetDisplayIndexResponse {}

message AmountRequest {}

message AmountResponse {
  int32 amount = 1;
}

message PlaylistResumeRequest {}

message PlaylistResumeResponse {
  int32 code = 1;
}

message ResumeTrackRequest {
  int32 start_index = 1;
  uint32 crc = 2;
  uint64 elapsed = 3;
  uint64 offset = 4;
}

message ResumeTrackResponse {}

message SetModifiedRequest {}

message SetModifiedResponse {}

message StartRequest {
  optional int32 start_index = 1;
  optional int32 elapsed = 2;
  optional int32 offset = 3;
}

message StartResponse {}

message SyncRequest {}

message SyncResponse {}

message RemoveAllTracksRequest {
  optional string playlist_id = 1;
}

message RemoveAllTracksResponse {}

message RemoveTracksRequest {
  repeated int32 positions = 1;
  optional string playlist_id = 2;
}

message RemoveTracksResponse {}

message CreatePlaylistRequest {
  optional string name = 1;
  repeated string tracks = 2;
}

message CreatePlaylistResponse {
  int32 start_index = 1;
}

message InsertTracksRequest {
  optional string playlist_id = 1;
  int32 position = 2;
  repeated string tracks = 3;
  optional bool shuffle = 4;
}

message InsertTracksResponse {}

message InsertDirectoryRequest {
  optional string playlist_id = 1;
  int32 position = 2;
  string directory = 3;
  optional bool recurse = 4;
  optional bool shuffle = 5;
}

message InsertDirectoryResponse {}

message InsertPlaylistRequest {
  int32 position = 1;
  string target_playlist_id = 2;
  string playlist_id = 3;
  optional bool shuffle = 4;
}

message InsertPlaylistResponse {}

message InsertAlbumRequest {
  int32 position = 1;
  string album_id = 2;
  optional bool shuffle = 3;
  optional string playlist_id = 4;
}

message InsertAlbumResponse {}

message InsertArtistTracksRequest {
  int32 position = 1;
  string artist_id = 2;
  optional bool shuffle = 3;
  optional string playlist_id = 4;
}

message InsertArtistTracksResponse {}

message ShufflePlaylistRequest {
  int32 start_index = 1;
}

message ShufflePlaylistResponse {}

message GetPlaylistRequest {
  string playlist_id = 1;
}

message GetPlaylistResponse {
  string id = 1;
  string name = 2;
  optional string folder_id = 3;
  optional string image = 4;
  optional string description = 5;
  int32 amount = 6;
  string created_at = 7;
  string updated_at = 8;
  repeated rockbox.v1alpha1.CurrentTrackResponse tracks = 9;
}

message CreateFolderRequest {
  string name = 1;
  optional string parent_id = 2;
}

message CreateFolderResponse {
  string folder_id = 1;
}

message GetFolderRequest {
  string id = 1;
}

message GetFolderResponse {
  string id = 1;
  string name = 2;
  optional string parent_id = 3;
}

message GetFoldersRequest {
  optional string parent_id = 1;
}

message GetFoldersResponse {
  repeated rockbox.v1alpha1.GetFolderResponse folders = 1;
}

message RemoveFolderRequest {
  string id = 1;
}

message RemoveFolderResponse {}

message RemovePlaylistRequest {
  string id = 1;
}

message RemovePlaylistResponse {}

message RenamePlaylistRequest {
  string id = 1;
  string name = 2;
}

message RenamePlaylistResponse {}

message RenameFolderRequest {
  string id = 1;
  string name = 2;
}

message RenameFolderResponse {}

message MovePlaylistRequest {
  string playlist_id = 1;
  string folder_id = 2;
}

message MovePlaylistResponse {}

message MoveFolderRequest {
  string folder_id = 1;
  string parent_id = 2;
}

message MoveFolderResponse {}

message GetPlaylistsRequest {
  optional string folder_id = 1;
}

message GetPlaylistsResponse {
  repeated rockbox.v1alpha1.GetPlaylistResponse playlists = 1;
}

service PlaylistService {
  rpc GetCurrent(GetCurrentRequest) returns (GetCurrentResponse) {}
  rpc GetResumeInfo(GetResumeInfoRequest) returns (GetResumeInfoResponse) {}
  rpc GetTrackInfo(GetTrackInfoRequest) returns (GetTrackInfoResponse) {}
  rpc GetFirstIndex(GetFirstIndexRequest) returns (GetFirstIndexResponse) {}
  rpc GetDisplayIndex(GetDisplayIndexRequest) returns (GetDisplayIndexResponse) {}
  rpc Amount(AmountRequest) returns (AmountResponse) {}
  rpc PlaylistResume(PlaylistResumeRequest) returns (PlaylistResumeResponse) {}
  rpc ResumeTrack(ResumeTrackRequest) returns (ResumeTrackResponse) {}
  rpc SetModified(SetModifiedRequest) returns (SetModifiedResponse) {}
  rpc Start(StartRequest) returns (StartResponse) {}
  rpc Sync(SyncRequest) returns (SyncResponse) {}
  rpc RemoveAllTracks(RemoveAllTracksRequest) returns (RemoveAllTracksResponse) {}
  rpc RemoveTracks(RemoveTracksRequest) returns (RemoveTracksResponse) {}
  rpc CreatePlaylist(CreatePlaylistRequest) returns (CreatePlaylistResponse) {}
  rpc InsertTracks(InsertTracksRequest) returns (InsertTracksResponse) {}
  rpc InsertDirectory(InsertDirectoryRequest) returns (InsertDirectoryResponse) {}
  rpc InsertPlaylist(InsertPlaylistRequest) returns (InsertPlaylistResponse) {}
  rpc InsertAlbum(InsertAlbumRequest) returns (InsertAlbumResponse) {}
  rpc InsertArtistTracks(InsertArtistTracksRequest) returns (InsertArtistTracksResponse) {}
  rpc ShufflePlaylist(ShufflePlaylistRequest) returns (ShufflePlaylistResponse) {}
  rpc GetPlaylist(GetPlaylistRequest) returns (GetPlaylistResponse) {}
  rpc GetPlaylists(GetPlaylistsRequest) returns (GetPlaylistsResponse) {}
  rpc CreateFolder(CreateFolderRequest) returns (CreateFolderResponse) {}
  rpc GetFolder(GetFolderRequest) returns (GetFolderResponse) {}
  rpc GetFolders(GetFoldersRequest) returns (GetFoldersResponse) {}
  rpc RemoveFolder(RemoveFolderRequest) returns (RemoveFolderResponse) {}
  rpc RemovePlaylist(RemovePlaylistRequest) returns (RemovePlaylistResponse) {}
  rpc RenamePlaylist(RenamePlaylistRequest) returns (RenamePlaylistResponse) {}
  rpc RenameFolder(RenameFolderRequest) returns (RenameFolderResponse) {}
  rpc MovePlaylist(MovePlaylistRequest) returns (MovePlaylistResponse) {}
  rpc MoveFolder(MoveFolderRequest) returns (MoveFolderResponse) {}
}
